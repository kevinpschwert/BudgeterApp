@model IEnumerable<BudgetApp.Models.BudgetHistory>
@using Microsoft.AspNet.Identity
@using BudgetApp.Models
@using BudgetApp.Helper
@using System.Globalization

@{
    ViewBag.Title = "Index";
}

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Financial Surety</title>
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <!-- Bootstrap 3.3.6 -->
    <!-- Font Awesome -->
    <link rel="stylesheet" href="../../bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ionicons/2.0.1/css/ionicons.min.css">
    <!-- DataTables -->

    <link rel="stylesheet" href="../../plugins/datatables/dataTables.bootstrap.css">
    <!-- Theme style -->
    <link href="~/dist/css/AdminLTE.css" rel="stylesheet" />
    <link href="~/basic/css/basic.css" rel="stylesheet" />
    <link href="~/basic/css/demo.css" rel="stylesheet" />
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="../../dist/css/skins/_all-skins.min.css">
    <link rel="icon" href="~/images/favicon-32x32.png" sizes="32X32" />
    <link rel="apple-touch-icon" href="/images/icons/favicon.png">

    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="~/dist/css/skins/_all-skins.min.css">
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

</head>
<body class="hold-transition skin-blue sidebar-mini">
        
        <div class="wrapper">
        <header class="main-header">
            <!-- Logo -->
            <a href="index2.html" class="logo" style="background-color:#222d32">
                <!-- mini logo for sidebar mini 50x50 pixels -->
                <span class="logo-mini"><b>A</b>LT</span>
                <!-- logo for regular state and mobile devices -->
                <span class="logo-lg"><b>Financial Surety</b></span>
            </a>
            <!-- Header Navbar: style can be found in header.less -->
            <nav class="navbar navbar-static-top" id="backgroundimage" />
            <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">
                <span class="sr-only">Toggle navigation</span>
            </a>
            <!-- Navbar Right Menu -->
            <div class="navbar-custom-menu">
                <ul class="nav nav-bar"></ul>
            </div>
            </nav>
        </header>
        <!-- Left side column. contains the logo and sidebar -->
        <aside class="main-sidebar">
            <!-- sidebar: style can be found in sidebar.less -->
            <section class="sidebar">
                <!-- Sidebar user panel -->
                <div class="user-panel">
                    <div class="pull-left image">
                        <img src="~/images/money.jpg" class="img-circle" alt="User Image">
                    </div>
                    <div class="pull-left info">
                        @if (Request.IsAuthenticated)
                        {
                            using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
                            {
                                @Html.AntiForgeryToken()
                                <p>
                                    @{
                                        var manager = new UserManager<ApplicationUser>(new Microsoft.AspNet.Identity.EntityFramework.UserStore<ApplicationUser>(new ApplicationDbContext()));
                                        var currentUser = manager.FindById(User.Identity.GetUserId());
                                    }
                                    @Html.ActionLink("Welcome " + currentUser.FirstName + "!", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })
                                    <br />
                                    <br />
                                    <a href="javascript:document.getElementById('logoutForm').submit()">Log off</a>
                                </p>
                                            }
                                        }
                                        else
                                        {

                                            <p>@Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" })</p>
                                            <p>@Html.ActionLink("Login", "LogMeIn", "Home", routeValues: null, htmlAttributes: new { id = "loginLink" })</p>
                                        }
                    </div>
                </div>
                <!-- search form -->
                <form action="#" method="get" class="sidebar-form">
                    <div class="input-group">
                        <input type="text" name="q" class="form-control" placeholder="Search...">
                        <span class="input-group-btn">
                            <button type="submit" name="search" id="search-btn" class="btn btn-flat">
                                <i class="fa fa-search"></i>
                            </button>
                        </span>
                    </div>
                </form>
                <!-- /.search form -->
                <!-- sidebar menu: : style can be found in sidebar.less -->
                <ul class="sidebar-menu">
                    <li class="header">MAIN NAVIGATION</li>
                    <li><a href="@Url.Action("DashBoard", "Home")"><i class="fa fa-dashboard"></i> <span>DashBoard</span></a></li>
                    <li><a href="@Url.Action("Index", "Accounts")"><i class="fa fa-dashboard"></i> <span>Accounts</span></a></li>
                    <li class="treeview">
                        <a href="#">
                            <i class="fa fa-files-o"></i>
                            <span>Transactions</span>
                            <span class="pull-right-container">
                                <i class="fa fa-angle-left pull-right"></i>
                            </span>
                        </a>
                        <ul class="treeview-menu">
                            <li><a href="@Url.Action("Index", "Transactions")"><i class="fa fa-dollar"></i> <span>All</span></a></li>
                            <li><a href="@Url.Action("AccountTransactions", "Transactions")"><i class="fa fa-dashboard"></i> <span>Transactions by Account</span></a></li>
                            <li><a href="@Url.Action("CategoryTransactions", "Transactions")"><i class="fa fa-dashboard"></i> <span>Transactions by Category</span></a></li>
                        </ul>
                    </li>

                    <li><a href="@Url.Action("Index", "Budgets")"><i class="fa fa-pie-chart"></i> <span>Budgets</span></a></li>
                    <li><a href="@Url.Action("Index", "HouseHolds")"><i class="fa fa-book"></i> <span>HouseHold</span></a></li>
                    <li class="treeview">
                        <a href="#">
                            <i class="fa fa-files-o"></i>
                            <span>Budget History</span>
                            <span class="pull-right-container">
                                <i class="fa fa-angle-left pull-right"></i>
                            </span>
                        </a>
                        <ul class="treeview-menu">

                            @foreach (var item in (Model.OrderBy(x => DateTime.ParseExact(x.Title, "MMMM yyyy", CultureInfo.InvariantCulture)).GroupBy(x => x.Title)))
                            {
                                <li><a href="@Url.Action("Index", "BudgetHistories", new { Title = item.First().Title })"><i class="fa fa-dollar"></i> <span>@item.First().Title</span></a></li>
                            }

                        </ul>
                    </li>

                </ul>
            </section>
         
        </aside>
        <div class="content-wrapper" id="backgroundimage1">
            <!-- Content Header (Page header) -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title" style="color:black;">Budget History</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body" style="background-color:white;">
                    <div class="chart">
                        <canvas id="areaChart" style="height:250px"></canvas>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>

            <section class="content-header">
                <h1 style="color:white;margin-left: 20px;">
                    Your Budgets
                </h1>
            </section>
            <!-- Main content -->
            <section class="content">
                @{
                    int num = 1;
                    double total = 0;
                    ApplicationDbContext db = new ApplicationDbContext();
                    var manager1 = new UserManager<ApplicationUser>(new Microsoft.AspNet.Identity.EntityFramework.UserStore<ApplicationUser>(new ApplicationDbContext()));
                    var currentUser1 = manager1.FindById(User.Identity.GetUserId());
                }

                <div class="col-md-8">
                    <h2 style="color:white;">@ViewBag.ThisTitle</h2>
                    <!-- Custom Tabs -->
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs" style="padding:10px 0 0 10px;">
                            <li style="background:#3f88b3;" class="active"><a style="background:#3f88b3;" href="#tab_1" data-toggle="tab">Weekly</a></li>
                            <li style="background:#3f88b3;"><a style="background:#3f88b3;" href="#tab_2" data-toggle="tab">Monthly</a></li>
                            <li style="background:#3f88b3;"><a style="background:#3f88b3;" href="#tab_3" data-toggle="tab">Annual</a></li>
                        </ul>
                        @{
                            int num1 = 1;
                            BudgetHistoryHelper bh = new BudgetHistoryHelper();
                        }

                        <div class="tab-content">
                            @do
                            {
                                <div class=@if (num1 == 1)
                                {
                                    @:" tab-pane active"
                                                                                                           } else { @: "tab-pane"
                                                                                                           } id="tab_@num1">
                                    <div class="box">
                                        <!-- /.box-header -->
                                        <!-- /.box -->
                                        <div class="box">
                                            <div class="box-header">
                                            </div>
                                            <!-- /.box-header -->
                                            <div class="box-body">
                                                <h3 style="color:black;"></h3>
                                                <h3 style="color:black;">Amount Spent: $@bh.Total(num1, ViewBag.ThisTitle) </h3>
                                                <table id="example1" class="table table-bordered table-striped">
                                                    <thead>
                                                        <table class="table">
                                                            <tr>
                                                                <th>
                                                                    @Html.DisplayNameFor(model => model.Name)
                                                                </th>
                                                                <th>
                                                                    Amount Spent
                                                                </th>
                                                                <th>
                                                                    Budgeted
                                                                </th>
                                                                <th>
                                                                    Amount Used
                                                                </th>
                                                                <th>
                                                                    %
                                                                </th>

                                                                <th></th>
                                                            </tr>

                                                            @foreach (var item in Model.Where(u => u.Frequency.Id == num1 && u.Title == ViewBag.ThisTitle))
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        @item.Name
                                                                    </td>
                                                                    <td>
                                                                        @string.Format("{0:0.00}", item.TransactionAmount)
                                                                    </td>

                                                                    <td>
                                                                        @string.Format("{0:0.00}", item.Budgeted)
                                                                    </td>

                                                                    @if (((item.TransactionAmount / item.Budgeted) * 100) <= 99.9)
                                                                    {
                                                                        <td>
                                                                            <div class="progress progress-xs">
                                                                                <div class="progress-bar progress-bar-green" style="width: @((item.TransactionAmount / item.Budgeted) * 100)%"></div>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <span class="badge bg-green">@Math.Round(((item.TransactionAmount / item.Budgeted) * 100), 2)%</span>
                                                                        </td>
                                                                    }
                                                                    else
                                                                    {
                                                                        <td>
                                                                            <div class="progress progress-xs">
                                                                                <div class="progress-bar progress-bar-danger" style="width: @((item.TransactionAmount / item.Budgeted) * 100)%"></div>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <span class="badge bg-red">@Math.Round(((item.TransactionAmount / item.Budgeted) * 100), 2)%</span>
                                                                        </td>
                                                                    }
                                                                    <td>
                                                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                                                                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                                                                    </td>
                                                                </tr>

                                                            }
                                                        </table>
                                                </table>

                                            </div>
                                            <!-- /.box-body -->
                                        </div>
                                    </div>
                                </div>
                                <!-- /.tab-pane -->
                                num1++;
                            }
                            while (num1 < 4);

                            <!-- /.tab-content -->

                        </div>
                        <!-- nav-tabs-custom -->
                    </div>
                </div>
            </section>
        </div>
    </div>
    <footer class="main-footer">
        <strong>Kevin Schwert's Financial App</strong>
    </footer>



    <script src="~/plugins/sparkline/jquery.sparkline.min.js"></script>
    <!-- jvectormap -->
    <script src="~/plugins/jvectormap/jquery-jvectormap-1.2.2.min.js"></script>
    <script src="~/plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <!-- SlimScroll 1.3.0 -->
    <!-- ChartJS 1.0.1 -->
    <script src="~/plugins/chartjs/Chart.min.js"></script>
    <!-- AdminLTE dashboard demo (This is only for demo purposes) -->
    <script src="~/dist/js/pages/dashboard2.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="~/script/main.js"></script>

    <script src="../../plugins/jQuery/jquery-2.2.3.min.js"></script>
    <!-- Bootstrap 3.3.6 -->
    <script src="../../bootstrap/js/bootstrap.min.js"></script>
    <!-- DataTables -->
    <script src="../../plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="../../plugins/datatables/dataTables.bootstrap.min.js"></script>
    <!-- SlimScroll -->
    <script src="../../plugins/chartjs/Chart.min.js"></script>
    <script src="../../plugins/slimScroll/jquery.slimscroll.min.js"></script>
    <!-- FastClick -->
    <script src="../../plugins/fastclick/fastclick.js"></script>
    <!-- AdminLTE App -->
    <script src="../../dist/js/app.min.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="../../dist/js/demo.js"></script>
    <script src="~/basic/js/basic.js"></script>
    <script src="~/basic/js/jquery.simplemodal.js"></script>
    <!-- page script -->
    <script>
        $(function () {
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $("#areaChart").get(0).getContext("2d");
            // This will get the first returned node in the jQuery collection.
            var areaChart = new Chart(areaChartCanvas);

            var areaChartData = {

                labels: [
                    @foreach (var item in (Model.Where(y => y.FrequencyId == 2).OrderBy(x => DateTime.ParseExact(x.Title, "MMMM yyyy", CultureInfo.InvariantCulture)).GroupBy(x => x.Title)))
                {
                    @:"@item.First().Title",
                                    }
                ],
                datasets: [
                  {
                      label: "Amount Spent",
                      fillColor: "rgba(210, 214, 222, 1)",
                      strokeColor: "rgba(210, 214, 222, 1)",
                      pointColor: "rgba(210, 214, 222, 1)",
                      pointStrokeColor: "#c1c7d1",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(220,220,220,1)",
                      data: [
                         @foreach (var item in (Model.Where(y => y.FrequencyId == 2).OrderBy(x => DateTime.ParseExact(x.Title, "MMMM yyyy", CultureInfo.InvariantCulture)).GroupBy(x => x.Title)))
                  {
                       @:(@item.Select(u => u.TransactionAmount).DefaultIfEmpty().Sum()),
                  }
                      ]
                  },
                  {
                      label: "Budgeted",
                      fillColor: "rgba(60,141,188,0.9)",
                      strokeColor: "rgba(60,141,188,0.8)",
                      pointColor: "#3b8bba",
                      pointStrokeColor: "rgba(60,141,188,1)",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(60,141,188,1)",
                      data: [
                          @foreach (var item in (Model.Where(y => y.FrequencyId == 2).OrderBy(x => DateTime.ParseExact(x.Title, "MMMM yyyy", CultureInfo.InvariantCulture)).GroupBy(x => x.Title)))
        {
            @:(@item.Select(u => u.Budgeted).DefaultIfEmpty().Sum()),
            }
                      ]
                  }
                ]
            };

            var areaChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: false,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: false,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true
            };

            //Create the line chart
            areaChart.Line(areaChartData, areaChartOptions);

            //-------------
            //- LINE CHART -
            //--------------
            var lineChartCanvas = $("#lineChart").get(0).getContext("2d");
            var lineChart = new Chart(lineChartCanvas);
            var lineChartOptions = areaChartOptions;
            lineChartOptions.datasetFill = false;
            lineChart.Line(areaChartData, lineChartOptions);

            //-------------
            //- PIE CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var pieChartCanvas = $("#pieChart").get(0).getContext("2d");
            var pieChart = new Chart(pieChartCanvas);
            var PieData = [
              {
                  value: 700,
                  color: "#f56954",
                  highlight: "#f56954",
                  label: "Chrome"
              },
              {
                  value: 500,
                  color: "#00a65a",
                  highlight: "#00a65a",
                  label: "IE"
              },
              {
                  value: 400,
                  color: "#f39c12",
                  highlight: "#f39c12",
                  label: "FireFox"
              },
              {
                  value: 600,
                  color: "#00c0ef",
                  highlight: "#00c0ef",
                  label: "Safari"
              },
              {
                  value: 300,
                  color: "#3c8dbc",
                  highlight: "#3c8dbc",
                  label: "Opera"
              },
              {
                  value: 100,
                  color: "#d2d6de",
                  highlight: "#d2d6de",
                  label: "Navigator"
              }
            ];
            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: "#fff",
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 50, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: "easeOutBounce",
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
            };
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            pieChart.Doughnut(PieData, pieOptions);

            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $("#barChart").get(0).getContext("2d");
            var barChart = new Chart(barChartCanvas);
            var barChartData = areaChartData;
            barChartData.datasets[1].fillColor = "#00a65a";
            barChartData.datasets[1].strokeColor = "#00a65a";
            barChartData.datasets[1].pointColor = "#00a65a";
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            };

            barChartOptions.datasetFill = false;
            barChart.Bar(barChartData, barChartOptions);
        });
    </script>

</body>
</html>